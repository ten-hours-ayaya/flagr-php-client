<?php
/**
 * EvaluationBatchRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ayaya\FlagrClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flagr
 *
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\".
 *
 * OpenAPI spec version: 1.1.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ayaya\FlagrClient\Model;

use \ArrayAccess;
use \Ayaya\FlagrClient\ObjectSerializer;

/**
 * EvaluationBatchRequest Class Doc Comment
 *
 * @category Class
 * @package  Ayaya\FlagrClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EvaluationBatchRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'evaluationBatchRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'entities' => '\Ayaya\FlagrClient\Model\EvaluationEntity[]',
'enableDebug' => 'bool',
'flagIDs' => 'int[]',
'flagKeys' => 'string[]',
'flagTags' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'entities' => null,
'enableDebug' => null,
'flagIDs' => 'int64',
'flagKeys' => null,
'flagTags' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entities' => 'entities',
'enableDebug' => 'enableDebug',
'flagIDs' => 'flagIDs',
'flagKeys' => 'flagKeys',
'flagTags' => 'flagTags'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entities' => 'setEntities',
'enableDebug' => 'setEnableDebug',
'flagIDs' => 'setFlagIDs',
'flagKeys' => 'setFlagKeys',
'flagTags' => 'setFlagTags'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entities' => 'getEntities',
'enableDebug' => 'getEnableDebug',
'flagIDs' => 'getFlagIDs',
'flagKeys' => 'getFlagKeys',
'flagTags' => 'getFlagTags'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['entities'] = isset($data['entities']) ? $data['entities'] : null;
        $this->container['enableDebug'] = isset($data['enableDebug']) ? $data['enableDebug'] : null;
        $this->container['flagIDs'] = isset($data['flagIDs']) ? $data['flagIDs'] : null;
        $this->container['flagKeys'] = isset($data['flagKeys']) ? $data['flagKeys'] : null;
        $this->container['flagTags'] = isset($data['flagTags']) ? $data['flagTags'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['entities'] === null) {
            $invalidProperties[] = "'entities' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entities
     *
     * @return \Ayaya\FlagrClient\Model\EvaluationEntity[]
     */
    public function getEntities()
    {
        return $this->container['entities'];
    }

    /**
     * Sets entities
     *
     * @param \Ayaya\FlagrClient\Model\EvaluationEntity[] $entities entities
     *
     * @return $this
     */
    public function setEntities($entities)
    {
        $this->container['entities'] = $entities;

        return $this;
    }

    /**
     * Gets enableDebug
     *
     * @return bool
     */
    public function getEnableDebug()
    {
        return $this->container['enableDebug'];
    }

    /**
     * Sets enableDebug
     *
     * @param bool $enableDebug enableDebug
     *
     * @return $this
     */
    public function setEnableDebug($enableDebug)
    {
        $this->container['enableDebug'] = $enableDebug;

        return $this;
    }

    /**
     * Gets flagIDs
     *
     * @return int[]
     */
    public function getFlagIDs()
    {
        return $this->container['flagIDs'];
    }

    /**
     * Sets flagIDs
     *
     * @param int[] $flagIDs flagIDs
     *
     * @return $this
     */
    public function setFlagIDs($flagIDs)
    {
        $this->container['flagIDs'] = $flagIDs;

        return $this;
    }

    /**
     * Gets flagKeys
     *
     * @return string[]
     */
    public function getFlagKeys()
    {
        return $this->container['flagKeys'];
    }

    /**
     * Sets flagKeys
     *
     * @param string[] $flagKeys flagKeys. Either flagIDs, flagKeys or flagTags works. If pass in multiples, Flagr may return duplicate results.
     *
     * @return $this
     */
    public function setFlagKeys($flagKeys)
    {
        $this->container['flagKeys'] = $flagKeys;

        return $this;
    }

    /**
     * Gets flagTags
     *
     * @return string[]
     */
    public function getFlagTags()
    {
        return $this->container['flagTags'];
    }

    /**
     * Sets flagTags
     *
     * @param string[] $flagTags flagTags. Either flagIDs, flagKeys or flagTags works. If pass in multiples, Flagr may return duplicate results.
     *
     * @return $this
     */
    public function setFlagTags($flagTags)
    {
        $this->container['flagTags'] = $flagTags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
