<?php
/**
 * EvalResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ayaya\FlagrClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flagr
 *
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\".
 *
 * OpenAPI spec version: 1.1.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ayaya\FlagrClient\Model;

use \ArrayAccess;
use \Ayaya\FlagrClient\ObjectSerializer;

/**
 * EvalResult Class Doc Comment
 *
 * @category Class
 * @package  Ayaya\FlagrClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EvalResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'evalResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'flagID' => 'int',
'flagKey' => 'string',
'flagSnapshotID' => 'int',
'segmentID' => 'int',
'variantID' => 'int',
'variantKey' => 'string',
'variantAttachment' => 'object',
'evalContext' => '\Ayaya\FlagrClient\Model\EvalContext',
'timestamp' => 'string',
'evalDebugLog' => '\Ayaya\FlagrClient\Model\EvalDebugLog'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'flagID' => 'int64',
'flagKey' => null,
'flagSnapshotID' => 'int64',
'segmentID' => 'int64',
'variantID' => 'int64',
'variantKey' => null,
'variantAttachment' => null,
'evalContext' => null,
'timestamp' => null,
'evalDebugLog' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'flagID' => 'flagID',
'flagKey' => 'flagKey',
'flagSnapshotID' => 'flagSnapshotID',
'segmentID' => 'segmentID',
'variantID' => 'variantID',
'variantKey' => 'variantKey',
'variantAttachment' => 'variantAttachment',
'evalContext' => 'evalContext',
'timestamp' => 'timestamp',
'evalDebugLog' => 'evalDebugLog'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'flagID' => 'setFlagID',
'flagKey' => 'setFlagKey',
'flagSnapshotID' => 'setFlagSnapshotID',
'segmentID' => 'setSegmentID',
'variantID' => 'setVariantID',
'variantKey' => 'setVariantKey',
'variantAttachment' => 'setVariantAttachment',
'evalContext' => 'setEvalContext',
'timestamp' => 'setTimestamp',
'evalDebugLog' => 'setEvalDebugLog'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'flagID' => 'getFlagID',
'flagKey' => 'getFlagKey',
'flagSnapshotID' => 'getFlagSnapshotID',
'segmentID' => 'getSegmentID',
'variantID' => 'getVariantID',
'variantKey' => 'getVariantKey',
'variantAttachment' => 'getVariantAttachment',
'evalContext' => 'getEvalContext',
'timestamp' => 'getTimestamp',
'evalDebugLog' => 'getEvalDebugLog'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['flagID'] = isset($data['flagID']) ? $data['flagID'] : null;
        $this->container['flagKey'] = isset($data['flagKey']) ? $data['flagKey'] : null;
        $this->container['flagSnapshotID'] = isset($data['flagSnapshotID']) ? $data['flagSnapshotID'] : null;
        $this->container['segmentID'] = isset($data['segmentID']) ? $data['segmentID'] : null;
        $this->container['variantID'] = isset($data['variantID']) ? $data['variantID'] : null;
        $this->container['variantKey'] = isset($data['variantKey']) ? $data['variantKey'] : null;
        $this->container['variantAttachment'] = isset($data['variantAttachment']) ? $data['variantAttachment'] : null;
        $this->container['evalContext'] = isset($data['evalContext']) ? $data['evalContext'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['evalDebugLog'] = isset($data['evalDebugLog']) ? $data['evalDebugLog'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets flagID
     *
     * @return int
     */
    public function getFlagID()
    {
        return $this->container['flagID'];
    }

    /**
     * Sets flagID
     *
     * @param int $flagID flagID
     *
     * @return $this
     */
    public function setFlagID($flagID)
    {
        $this->container['flagID'] = $flagID;

        return $this;
    }

    /**
     * Gets flagKey
     *
     * @return string
     */
    public function getFlagKey()
    {
        return $this->container['flagKey'];
    }

    /**
     * Sets flagKey
     *
     * @param string $flagKey flagKey
     *
     * @return $this
     */
    public function setFlagKey($flagKey)
    {
        $this->container['flagKey'] = $flagKey;

        return $this;
    }

    /**
     * Gets flagSnapshotID
     *
     * @return int
     */
    public function getFlagSnapshotID()
    {
        return $this->container['flagSnapshotID'];
    }

    /**
     * Sets flagSnapshotID
     *
     * @param int $flagSnapshotID flagSnapshotID
     *
     * @return $this
     */
    public function setFlagSnapshotID($flagSnapshotID)
    {
        $this->container['flagSnapshotID'] = $flagSnapshotID;

        return $this;
    }

    /**
     * Gets segmentID
     *
     * @return int
     */
    public function getSegmentID()
    {
        return $this->container['segmentID'];
    }

    /**
     * Sets segmentID
     *
     * @param int $segmentID segmentID
     *
     * @return $this
     */
    public function setSegmentID($segmentID)
    {
        $this->container['segmentID'] = $segmentID;

        return $this;
    }

    /**
     * Gets variantID
     *
     * @return int
     */
    public function getVariantID()
    {
        return $this->container['variantID'];
    }

    /**
     * Sets variantID
     *
     * @param int $variantID variantID
     *
     * @return $this
     */
    public function setVariantID($variantID)
    {
        $this->container['variantID'] = $variantID;

        return $this;
    }

    /**
     * Gets variantKey
     *
     * @return string
     */
    public function getVariantKey()
    {
        return $this->container['variantKey'];
    }

    /**
     * Sets variantKey
     *
     * @param string $variantKey variantKey
     *
     * @return $this
     */
    public function setVariantKey($variantKey)
    {
        $this->container['variantKey'] = $variantKey;

        return $this;
    }

    /**
     * Gets variantAttachment
     *
     * @return object
     */
    public function getVariantAttachment()
    {
        return $this->container['variantAttachment'];
    }

    /**
     * Sets variantAttachment
     *
     * @param object $variantAttachment variantAttachment
     *
     * @return $this
     */
    public function setVariantAttachment($variantAttachment)
    {
        $this->container['variantAttachment'] = $variantAttachment;

        return $this;
    }

    /**
     * Gets evalContext
     *
     * @return \Ayaya\FlagrClient\Model\EvalContext
     */
    public function getEvalContext()
    {
        return $this->container['evalContext'];
    }

    /**
     * Sets evalContext
     *
     * @param \Ayaya\FlagrClient\Model\EvalContext $evalContext evalContext
     *
     * @return $this
     */
    public function setEvalContext($evalContext)
    {
        $this->container['evalContext'] = $evalContext;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string $timestamp timestamp
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets evalDebugLog
     *
     * @return \Ayaya\FlagrClient\Model\EvalDebugLog
     */
    public function getEvalDebugLog()
    {
        return $this->container['evalDebugLog'];
    }

    /**
     * Sets evalDebugLog
     *
     * @param \Ayaya\FlagrClient\Model\EvalDebugLog $evalDebugLog evalDebugLog
     *
     * @return $this
     */
    public function setEvalDebugLog($evalDebugLog)
    {
        $this->container['evalDebugLog'] = $evalDebugLog;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
